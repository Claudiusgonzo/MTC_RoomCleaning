@page "/"

@inject RoomCleaning.AdminUI.Services.RoomPolicyService subService;


<h1>Room Cleaning Admin</h1>
<input placeholder="Filter by..." @oninput="Filter" />
@if (allRooms == null)
{
    <p><em>Loading...</em></p>
}

@if (allRooms.Length == 0)
{
    <p><em>No Rooms Found.</em></p>
}
else
{
<EditForm EditContext="@editContext" OnSubmit="HandleSubmit">
    <table class="table">
        <thead>
            <tr>
                <th>Room Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var room in filteredRooms)
            {
                <tr>
                    <td> <InputCheckbox @bind-Value="room.IsSelected" /></td>
                    <td>@room.DisplayName</td>
                </tr>
            }
        </tbody>
    </table>
    <p/>
    <label>
        Cleaning Time:
        <InputNumber @bind-Value="policy.CleaningTime" />
    </label>
    <p />
    <label>
        Clean Room Before Meeting?
        <InputCheckbox @bind-Value="policy.CleanBefore" />
    </label>
    <p />
    Notification Type:
    <p />
    <label>
        Email
        <InputRadio name="notification" SelectedValue="RoomCleaning.Shared.Models.NotificationType.Email" @bind-Value="policy.NotificationType" />

    </label>
    <p/>
    <label>
        SMS
        <InputRadio name="notification" SelectedValue="RoomCleaning.Shared.Models.NotificationType.SMS" @bind-Value="policy.NotificationType" />

    </label>
    <p />
    <button type="submit">Submit</button>
</EditForm>
}



@code
{
    private EditContext editContext;
    private string filter = "empty";

    private RoomCleaning.Shared.Models.Room[] allRooms;
    private RoomCleaning.Shared.Models.Room[] filteredRooms;

    private RoomCleaning.Shared.Models.RoomPolicy policy = new RoomCleaning.Shared.Models.RoomPolicy();

    protected override async Task OnInitializedAsync()
    {
        policy = new RoomCleaning.Shared.Models.RoomPolicy();
        editContext = new EditContext(policy);
        allRooms = filteredRooms = await subService.GetRoomsAsync();
    }

    public void Filter(ChangeEventArgs args)
    {
        if (allRooms is null || allRooms.Length == 0)
            return;

        if (args.Value.ToString() == string.Empty)
            filteredRooms = allRooms;

        var filteredList = from r in allRooms where r.Id.StartsWith(args.Value.ToString()) select r;
        filteredRooms = filteredList.ToArray();
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        filter = "bang";

        var selectedRooms = from f in filteredRooms where f.IsSelected select f;
        if (selectedRooms.Count() == 0)
            return; //TODO: error message

        var request = new RoomCleaning.Shared.Models.RoomPolicyRequest { Policy = policy, Rooms = selectedRooms.ToArray() };

        var result = await subService.SendPolicyRequest(request);

        //var dialogResult = await ModelDialog.ShowDialogAsync<ErrorDialog>("Error Saving Policy");
    }
}
