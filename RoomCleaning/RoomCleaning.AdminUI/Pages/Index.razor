@page "/"
@inject Blazor.ModalDialog.IModalDialogService ModalDialogService; 
@inject RoomCleaning.AdminUI.Services.RoomPolicyService subService;


<h3>Room Cleaning Admin</h3>
<input placeholder="Filter by..." @oninput="Filter" />


@if (allRooms == null || allRooms.Length == 0)
{
    <p><em>No Rooms Found.</em></p>
}
else
{
<EditForm EditContext="@editContext" OnSubmit="HandleSubmit">
    <div>
        <ul class="list-group" style="max-height: 300px; overflow:scroll; margin-bottom: 20px;">
            @foreach (var room in filteredRooms)
            {
                <li class="list-group-item">
                    <InputCheckbox @bind-Value="room.IsSelected" />
                    @room.DisplayName
                </li>
            }
        </ul>
    </div>

    <p />
    <label>
        Cleaning Time:
        <InputNumber @bind-Value="policy.CleaningTime" />
    </label>
    <p />
    <label>
        Clean Room Before Meeting? <i>Defaults is Clean After Meeting</i>
        <InputCheckbox @bind-Value="policy.CleanBefore" />
    </label>
    <p />
    Notification Type:
    <p />
    <label>
        Email
        <InputRadio name="notification" SelectedValue="RoomCleaning.Shared.Models.NotificationType.Email" @bind-Value="policy.NotificationType" />

    </label>
    <p />
    <label>
        SMS
        <InputRadio name="notification" SelectedValue="RoomCleaning.Shared.Models.NotificationType.SMS" @bind-Value="policy.NotificationType" />

    </label>
    <label>
        SMS
        <InputText @bind-Value="policy.NotificationAlias" />

    </label>
    <p />
    <button type="submit">Submit</button>
</EditForm>
}



@code
{
    private EditContext editContext;
    private string filter = "empty";

    private RoomCleaning.Shared.Models.RoomDetail[] allRooms;
    private RoomCleaning.Shared.Models.RoomDetail[] filteredRooms;

    private RoomCleaning.Shared.Models.CleaningPolicy policy = new RoomCleaning.Shared.Models.CleaningPolicy();

    protected override async Task OnInitializedAsync()
    {
        policy = new RoomCleaning.Shared.Models.CleaningPolicy();
        editContext = new EditContext(policy);
        allRooms = filteredRooms = await subService.GetRoomsAsync();
    }

    public void Filter(ChangeEventArgs args)
    {
        if (allRooms is null || allRooms.Length == 0)
            return;

        if (args.Value.ToString() == string.Empty)
            filteredRooms = allRooms;

        var filteredList = from r in allRooms where r.DisplayName.StartsWith(args.Value.ToString()) select r;
        filteredRooms = filteredList.ToArray();
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {

        var selectedRooms = from f in filteredRooms where f.IsSelected select new RoomCleaning.Shared.Models.Room { Id = f.Id, Email = f.EmailAddress };
        if (selectedRooms.Count() == 0)
        {
            var parameters = new ModalDialogParameters();
            parameters.Add("Message", "No rooms were selected");
            var dialogResult = await ModalDialogService.ShowDialogAsync<ErrorDialog>("Error", new ModalDialogOptions(), parameters);
            return;
        }

        var request = new RoomCleaning.Shared.Models.RoomPolicyRequest { Policy = policy, Rooms = selectedRooms.ToArray() };

        var result = await subService.SendPolicyRequest(request);


    }
}
